From f6a22902b3701193d53a04b187c31453f019ae71 Mon Sep 17 00:00:00 2001
From: Stefan Mayer <stevijo.mayer@gmail.com>
Date: Thu, 5 Dec 2024 18:30:48 +0100
Subject: [PATCH] strongswan: add bypass rule for ipv6 and add policy to loop0

---
 .../strongswan/vpp_sswan/kernel_vpp_ipsec.c   | 68 +++++++++----------
 1 file changed, 33 insertions(+), 35 deletions(-)

diff --git a/kernel_vpp_ipsec.c b/kernel_vpp_ipsec.c
index e1c71edc8..ff348aa35 100644
--- a/kernel_vpp_ipsec.c
+++ b/kernel_vpp_ipsec.c
@@ -809,14 +809,14 @@ bypass_all (bool add, uint32_t spd_id, uint32_t sa_id, uint32_t priority)
   mp->is_add = add;
   mp->entry.sa_id = ntohl (sa_id);
   mp->entry.spd_id = ntohl (spd_id);
-  mp->entry.priority = ntohl (priority - POLICY_PRIORITY_PASS);
+  mp->entry.priority = 0;
   mp->entry.is_outbound = 0;
   mp->entry.policy = ntohl (IPSEC_API_SPD_ACTION_BYPASS);
   memset (mp->entry.local_address_stop.un.ip6, 0xFF, 16);
   memset (mp->entry.remote_address_stop.un.ip6, 0xFF, 16);
   mp->entry.remote_port_start = mp->entry.local_port_start = ntohs (0);
   mp->entry.remote_port_stop = mp->entry.local_port_stop = ntohs (0xFFFF);
-  mp->entry.protocol = IP_API_PROTO_ESP;
+  mp->entry.protocol = 0;
   if (vac->send (vac, (char *) mp, sizeof (*mp), &out, &out_len))
     {
       DBG1 (DBG_KNL, "vac %s SPD entry failed", add ? "adding" : "removing");
@@ -854,8 +854,10 @@ bypass_all (bool add, uint32_t spd_id, uint32_t sa_id, uint32_t priority)
       free (out);
       out = NULL;
     }
-  mp->entry.is_outbound = 0;
-  mp->entry.protocol = IP_API_PROTO_AH;
+  mp->entry.local_address_start.af = ADDRESS_IP6;
+  mp->entry.local_address_stop.af = ADDRESS_IP6;
+  mp->entry.remote_address_start.af = ADDRESS_IP6;
+  mp->entry.remote_address_stop.af = ADDRESS_IP6;
   if (vac->send (vac, (char *) mp, sizeof (*mp), &out, &out_len))
     {
       DBG1 (DBG_KNL, "vac %s SPD entry failed", add ? "adding" : "removing");
@@ -874,7 +876,7 @@ bypass_all (bool add, uint32_t spd_id, uint32_t sa_id, uint32_t priority)
       free (out);
       out = NULL;
     }
-  mp->entry.is_outbound = 1;
+  mp->entry.is_outbound = 0;
   if (vac->send (vac, (char *) mp, sizeof (*mp), &out, &out_len))
     {
       DBG1 (DBG_KNL, "vac %s SPD entry failed", add ? "adding" : "removing");
@@ -887,6 +889,12 @@ bypass_all (bool add, uint32_t spd_id, uint32_t sa_id, uint32_t priority)
 	    ntohl (rmp->retval));
       goto error;
     }
+  /* address "out" needs to be freed after vec->send */
+  if (out != NULL)
+    {
+      free (out);
+      out = NULL;
+    }
 
   rv = SUCCESS;
 
@@ -973,34 +981,8 @@ error:
 static status_t
 manage_bypass (bool add, uint32_t spd_id, uint32_t sa_id, uint32_t priority)
 {
-  uint16_t port;
-  status_t rv;
-
   bypass_all (add, spd_id, sa_id, priority);
-
-  port =
-    lib->settings->get_int (lib->settings, "%s.port", IKEV2_UDP_PORT, lib->ns);
-
-  if (port)
-    {
-      rv = bypass_port (add, spd_id, sa_id, port, priority);
-      if (rv != SUCCESS)
-	{
-	  return rv;
-	}
-    }
-
-  port = lib->settings->get_int (lib->settings, "%s.port_nat_t",
-				 IKEV2_NATT_PORT, lib->ns);
-  if (port)
-    {
-      rv = bypass_port (add, spd_id, sa_id, port, priority);
-      if (rv != SUCCESS)
-	{
-	  return rv;
-	}
-    }
-
+ 
   return SUCCESS;
 }
 
@@ -1015,7 +997,7 @@ manage_policy (private_kernel_vpp_ipsec_t *this, bool add,
   spd_t *spd = NULL;
   char *out = NULL, *interface = NULL;
   int out_len;
-  uint32_t sw_if_index, spd_id = ~0, sad_id = ~0;
+  uint32_t sw_if_index, spd_id = ~0, sad_id = ~0, loop_sw_if_index;
   status_t rv = FAILED;
   uint32_t priority, auto_priority;
   chunk_t src_from, src_to, dst_from, dst_to;
@@ -1028,6 +1010,14 @@ manage_policy (private_kernel_vpp_ipsec_t *this, bool add,
 
   mp = vl_msg_api_alloc (sizeof (*mp));
   memset (mp, 0, sizeof (*mp));
+  loop_sw_if_index = get_sw_if_index ("loop0");
+      DBG1 (DBG_KNL, "firstly created, spd for %s found sw_if_index is %d",
+	    interface, sw_if_index);
+      if (sw_if_index == ~0)
+	{
+	  DBG1 (DBG_KNL, "sw_if_index for %s not found", interface);
+	  goto error;
+	}
 
   this->mutex->lock (this->mutex);
   if (id->dir == POLICY_FWD)
@@ -1088,6 +1078,13 @@ manage_policy (private_kernel_vpp_ipsec_t *this, bool add,
 		sw_if_index);
 	  goto error;
 	}
+      if (interface_add_del_spd (TRUE, spd_id, loop_sw_if_index))
+	{
+	  DBG1 (DBG_KNL, "interface_add_del_spd  %d %d failed!!!!!", spd_id,
+		sw_if_index);
+	  goto error;
+	}
+
       INIT (spd, .spd_id = spd_id, .sw_if_index = sw_if_index, .policy_num = 0,
 	    .if_name = strdup (interface), );
       this->spds->put (this->spds, spd->if_name, spd);
@@ -1273,6 +1270,7 @@ next:
 	    "policy_num's ref is 0, delete spd_id %d sw_if_index %d sad_id %x",
 	    spd->spd_id, spd->sw_if_index, sad_id);
 	  interface_add_del_spd (FALSE, spd->spd_id, spd->sw_if_index);
+	  interface_add_del_spd (FALSE, spd->spd_id, loop_sw_if_index);
 	  manage_bypass (FALSE, spd->spd_id, sad_id, priority);
 	  spd_add_del (FALSE, spd->spd_id);
 	  this->spds->remove (this->spds, interface);
@@ -1610,8 +1608,8 @@ METHOD (kernel_ipsec_t, add_sa, status_t, private_kernel_vpp_ipsec_t *this,
     {
       DBG1 (DBG_KNL, "UDP encap");
       flags |= IPSEC_API_SAD_FLAG_UDP_ENCAP;
-      mp->entry.udp_src_port = htons (natt_port);
-      mp->entry.udp_dst_port = htons (natt_port);
+      mp->entry.udp_src_port = htons (id->src->get_port (id->src));
+      mp->entry.udp_dst_port = htons (id->dst->get_port (id->dst));
     }
   mp->entry.flags = htonl (flags);
 
-- 
2.44.1

